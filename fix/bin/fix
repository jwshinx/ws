#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'fix'
#require 'fileutils'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/fix` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/fix now"
  exit 64
end

include GLI::App

program_desc 'Fix a file'

version Fix::VERSION

# Use argument validation
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]


desc 'Delete files recursively'
arg_name '/path/to/file/list_of_rdoc_files.txt'
# du -mh /home/joel | sort -nr | grep /doc/ > /home/joel/Documents/projects/ruby/ws/real_list_of_doc_files.txt
# bundle exec bin/fix file_delete -f /home/joel/Documents/projects/ruby/ws/real_list_of_doc_files.txt
# df -h
command :file_delete do |c|
  c.desc 'Describe a switch to trailing_ws'
  c.switch :s

  c.desc 'Path and input file.'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    print_options global_options,options,args
    puts "\n---> start: file_delete command ran"

    puts "---> reading file"
    begin
      open("#{options[:f]}", "r") do |f|
        while (line = f.gets)
          filename = line.rstrip.split(' ')[1]
          #pattern = /(rdoc-\d|rdoc$)/
          pattern = /\/doc\//
          if filename =~ pattern
            if Dir.exists? filename
              FileUtils.remove_dir(filename)
              puts "        deleted: #{filename}"  
            else
              puts ' doc not exists: ' + filename
            end
          else
            puts '        not doc: ' + filename
          end
        end
      end
    rescue => err
      puts "Exception reading in file: #{err}"
      err
    end
    puts "--->   end: file_delete command ran"
  end
end

desc 'Remove whites at end of line'
arg_name '/path/to/file/input_file.txt'
command :trailing_ws do |c|
  c.desc 'Describe a switch to trailing_ws'
  c.switch :s

  c.desc 'Path and input file.'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    print_options global_options,options,args
    puts "\n---> start: trailing_ws command ran"

    sents = []
    puts "---> reading file"
    begin
      open("#{options[:f]}", "r") do |f|
        while (line = f.gets)
          sents << line.rstrip
        end
      end
    rescue => err
      puts "Exception reading in file: #{err}"
      err
    end
    
    puts "---> writing file"
    begin
      open("#{options[:f]}.tmp", "w") do |f|
        sents.each do |line|
          f << "#{line.rstrip}\n"
        end 
      end
    rescue => err
      puts "Exception writing out file: #{err}"
      err
    end

    #File.rename("#{options[:f]}.tmp", options[:f])

    puts "--->   end: trailing_ws command ran"
  end
end

desc 'Describe eof_nl here'
arg_name 'Describe arguments to eof_nl here'
command :eof_nl do |c|
  c.action do |global_options,options,args|
    puts "eof_nl command ran"
  end
end

def print_options global_options,options,args
  puts '-'*50
  puts "1. Global: #{global_options.inspect}"
  puts "2. Options: #{options.inspect}"
  puts "3. Args: #{args.inspect}"
  puts '-'*50
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
